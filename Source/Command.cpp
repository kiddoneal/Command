// This source file was auto-generated by ClassMate++
// Created: 21 Sep 2015 8:45:44 am
// Copyright (c) 2015, HurleyWorks

#include "Command.h"
#include "Void.h"

Poco::Any Commander::undoLast()
{
	if (!doneCmds.size()) return Poco::Void();

	DoUndo cmdPair = doneCmds.front();

	// remove the last cmd from the done list
	doneCmds.pop_front();

	// add the last cmd to the undone list
	undoneCmds.push_front(cmdPair);

	// execute the undo command
	return cmdPair.second->execute();
}

Poco::Any Commander::redoLast()
{
	if (!undoneCmds.size()) return Poco::Void();

	DoUndo cmdPair = undoneCmds.front();

	// remove the last cmd  from the undone list
	undoneCmds.pop_front();

	// add the last undone cmd to the do list
	doneCmds.push_front(cmdPair);

	// execute the do command
	return cmdPair.first->execute();
}

void Commander::undoAll()
{
	// make sure there's done cmds left to undo
	if (!doneCmds.size()) return;

	while (doneCmds.size())
	{
		// get last executed cmd
		DoUndo cmdPair = doneCmds.front();

		// run it's undo functor
		cmdPair.second->execute();

		// remove the last cmd from the done list
		doneCmds.pop_front();

		// add the last cmd to the undone list
		undoneCmds.push_front(cmdPair);
	}
}

void Commander::redoAll()
{
	// make sure there's undone cmds left to redo
	if (!undoneCmds.size()) return;

	while (undoneCmds.size())
	{
		// get the last undone cmd
		DoUndo cmdPair = undoneCmds.front();

		// remove the last undone cmd from the undone list
		undoneCmds.pop_front();

		// add the last undone cmd to the done list
		doneCmds.push_front(cmdPair);

		// run the do functor
		cmdPair.first->execute();
	}
}
