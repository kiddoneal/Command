// This header file was auto-generated by ClassMate++
// Created: 21 Sep 2015 8:45:44 am
// Copyright (c) 2015, HurleyWorks

#pragma once

#include <utility>
#include <functional>
#include <memory>
#include <deque>
#include "Any.h"

// The command pattern is a behavioral design pattern in which an object 
// is used to represent and encapsulate all the information needed to call
// a method at a later time.This information includes the method name,
// the object that owns the method and values for the method parameters.

// base type that can be stored in a container
class Cmd_t
{

 public:
	typedef std::shared_ptr<Cmd_t> Ptr;

	virtual ~Cmd_t() = default;
	virtual Poco::Any execute() = 0;
};

template<typename T>
class Command_t : public Cmd_t
{

 public:
	Command_t(T && cmd)
		: command(std::move(cmd))
	{}

	Poco::Any execute(){ return command(); }

 private:
	T command;
};

typedef std::pair<Cmd_t::Ptr, Cmd_t::Ptr> DoUndo;
typedef std::deque<DoUndo> Cmds;

class Commander
{

 public:
	 Commander() = default;
	 ~Commander() = default;

	template<typename DO_OBJ, typename DO_CALL, typename... DO_ARGS>
	auto addDo(DO_OBJ * doObj, DO_CALL doFunc, bool execute, DO_ARGS&&... doArgs)->typename std::result_of< decltype(doFunc)(DO_OBJ*, DO_ARGS...)>::type
	{
		typedef typename std::result_of<decltype(doFunc)(DO_OBJ*, DO_ARGS...)>::type result_type;
		typedef std::function<result_type()> func_type;

		func_type doCmd = std::bind(doFunc, doObj, std::forward<DO_ARGS>(doArgs)...);
		
		doFunction.reset();
		doFunction = std::make_shared<Command_t<func_type>>(std::move(doCmd));

		return execute ? Poco::AnyCast<result_type>(doFunction->execute()) : result_type();
	}

	template<typename UNDO_OBJ, typename UNDO_CALL, typename... UNDO_ARGS>
	void addUndo(UNDO_OBJ * undoObj, UNDO_CALL undoFunc, UNDO_ARGS&&... undoArgs)
	{
		typedef typename std::result_of<decltype(undoFunc)(UNDO_OBJ*, UNDO_ARGS...)>::type result_type;
		typedef std::function<result_type()> func_type;

		func_type undoCmd = std::bind(undoFunc, undoObj, std::forward<UNDO_ARGS>(undoArgs)...);

		undoFunction.reset();
		undoFunction = std::make_shared<Command_t<func_type>>(std::move(undoCmd));

		// make a command with a do and undo function
		doneCmds.push_front(std::make_pair(doFunction, undoFunction));
	}

	Poco::Any undoLast();
	Poco::Any redoLast();

	void undoAll();
	void redoAll();

	void clearAll() { doneCmds.clear(); undoneCmds.clear(); }
	
	size_t getDoneCount() const { return doneCmds.size(); }
	size_t getUndoneCount() const { return undoneCmds.size(); }

 private:
	Cmds doneCmds;
	Cmds undoneCmds;
	Cmd_t::Ptr doFunction = nullptr;
	Cmd_t::Ptr undoFunction = nullptr;
};